package main

import (
	"fmt"
	"io"
	"net"
	"os"
	"os/signal"
	"path/filepath"
	"strings"
	"syscall"
	"time"

	"apiclient"
	"cli/pkg/client"

	"github.com/spf13/cobra"
	"golang.org/x/crypto/ssh"
	"golang.org/x/term"
)

// resolveSandboxIdentifier resolves either a sandbox ID or dispense-name to a sandbox
func resolveSandboxIdentifier(apiClient *client.Client, identifier string, useProxy bool) (string, *apiclient.Sandbox, error) {
	// Check if identifier looks like a UUID (sandbox ID)
	if isUUID(identifier) {
		if !useProxy {
			fmt.Printf("Checking sandbox %s...\n", identifier)
		}
		sandbox, err := apiClient.GetSandbox(identifier)
		if err != nil {
			return "", nil, fmt.Errorf("error getting sandbox: %w", err)
		}
		return identifier, sandbox, nil
	}
	
	// Otherwise, treat as dispense-name and search for it
	if !useProxy {
		fmt.Printf("Looking up sandbox with dispense-name: %s...\n", identifier)
	}
	
	// List all sandboxes and find the one with matching dispense-name
	sandboxes, err := apiClient.ListSandboxes()
	if err != nil {
		return "", nil, fmt.Errorf("error listing sandboxes: %w", err)
	}
	
	for _, sandbox := range sandboxes {
		if dispenseName, exists := sandbox.Labels["dispense-name"]; exists && dispenseName == identifier {
			if !useProxy {
				fmt.Printf("Found sandbox %s with dispense-name: %s\n", sandbox.Id, identifier)
			}
			return sandbox.Id, &sandbox, nil
		}
	}
	
	return "", nil, fmt.Errorf("no sandbox found with dispense-name: %s", identifier)
}

// isUUID checks if a string looks like a UUID
func isUUID(s string) bool {
	// Simple UUID pattern check: 8-4-4-4-12 characters with hyphens
	// This is a basic check, not a strict UUID validation
	if len(s) != 36 {
		return false
	}
	
	// Check for hyphens at expected positions
	if s[8] != '-' || s[13] != '-' || s[18] != '-' || s[23] != '-' {
		return false
	}
	
	// Check that all other characters are alphanumeric
	for i, c := range s {
		if i == 8 || i == 13 || i == 18 || i == 23 {
			continue // Skip hyphen positions
		}
		if !((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F')) {
			return false
		}
	}
	
	return true
}

var sshCmd = &cobra.Command{
	Use:   "ssh <sandboxId|dispense-name>",
	Short: "Connect to a sandbox via SSH",
	Long:  `Connect to a sandbox via SSH using either the sandbox ID or dispense-name. The sandbox will be started if it's currently stopped.`,
	Args:  cobra.ExactArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		identifier := args[0]
		
		// Get command flags
		expiresInMinutes, _ := cmd.Flags().GetFloat32("expires")
		showTokenOnly, _ := cmd.Flags().GetBool("token-only")
		useProxy, _ := cmd.Flags().GetBool("proxy")
		saveConfig, _ := cmd.Flags().GetBool("save")
		
		// Create API client
		apiClient, err := client.NewClient()
		if err != nil {
			fmt.Fprintf(os.Stderr, "Error creating API client: %s\n", err)
			os.Exit(1)
		}

		// Step 1: Resolve identifier to sandbox ID
		sandboxId, sandbox, err := resolveSandboxIdentifier(apiClient, identifier, useProxy)
		if err != nil {
			fmt.Fprintf(os.Stderr, "Error resolving sandbox: %s\n", err)
			os.Exit(1)
		}

		// Step 2: Check sandbox state and start if stopped
		state := "Unknown"
		if sandbox.State != nil {
			state = string(*sandbox.State)
		}
		
		if !useProxy {
			fmt.Printf("Sandbox state: %s\n", state)
		}
		
		if state == string(apiclient.SANDBOXSTATE_STOPPED) {
			if !useProxy {
				fmt.Println("Sandbox is stopped. Starting sandbox...")
			}
			sandbox, err = apiClient.StartSandbox(sandboxId)
			if err != nil {
				fmt.Fprintf(os.Stderr, "Error starting sandbox: %s\n", err)
				os.Exit(1)
			}
			if !useProxy {
				fmt.Println("Sandbox started successfully.")
			}
		} else if state == string(apiclient.SANDBOXSTATE_STOPPING) {
			if !useProxy {
				fmt.Println("Sandbox is stopping. Waiting for it to stop...")
			}
			// Wait for sandbox to stop with 30 second timeout
			timeout := 30 * time.Second
			startTime := time.Now()
			
			for {
				if time.Since(startTime) > timeout {
					fmt.Fprintf(os.Stderr, "Timeout waiting for sandbox to stop after %v\n", timeout)
					os.Exit(1)
				}
				
				time.Sleep(2 * time.Second)
				sandbox, err = apiClient.GetSandbox(sandboxId)
				if err != nil {
					fmt.Fprintf(os.Stderr, "Error checking sandbox status: %s\n", err)
					os.Exit(1)
				}
				if sandbox.State != nil {
					currentState := string(*sandbox.State)
					if currentState == string(apiclient.SANDBOXSTATE_STOPPED) {
						if !useProxy {
							fmt.Println("Sandbox has stopped. Starting sandbox...")
						}
						// Start the sandbox after it has stopped
						sandbox, err = apiClient.StartSandbox(sandboxId)
						if err != nil {
							fmt.Fprintf(os.Stderr, "Error starting sandbox: %s\n", err)
							os.Exit(1)
						}
						if !useProxy {
							fmt.Println("Sandbox started successfully.")
						}
						break
					} else if currentState == string(apiclient.SANDBOXSTATE_DESTROYED) {
						fmt.Fprintf(os.Stderr, "Sandbox was destroyed while stopping. Current state: %s\n", currentState)
						os.Exit(1)
					}
				}
			}
		} else if state == string(apiclient.SANDBOXSTATE_STARTING) {
			if !useProxy {
				fmt.Println("Sandbox is starting. Please wait...")
			}
			// Wait for sandbox to be ready
			for {
				time.Sleep(2 * time.Second)
				sandbox, err = apiClient.GetSandbox(sandboxId)
				if err != nil {
					fmt.Fprintf(os.Stderr, "Error checking sandbox status: %s\n", err)
					os.Exit(1)
				}
				if sandbox.State != nil {
					currentState := string(*sandbox.State)
					if currentState == string(apiclient.SANDBOXSTATE_STARTED) {
						if !useProxy {
							fmt.Println("Sandbox is now ready.")
						}
						break
					} else if currentState == string(apiclient.SANDBOXSTATE_STOPPED) || 
							  currentState == string(apiclient.SANDBOXSTATE_DESTROYED) {
						fmt.Fprintf(os.Stderr, "Sandbox failed to start. Current state: %s\n", currentState)
						os.Exit(1)
					}
				}
			}
		} else if state != string(apiclient.SANDBOXSTATE_STARTED) {
			fmt.Fprintf(os.Stderr, "Sandbox is not in a valid state for SSH access. Current state: %s\n", state)
			os.Exit(1)
		}

		// Step 3: Request SSH access
		if !useProxy {
			fmt.Println("Requesting SSH access...")
		}
		sshAccess, err := apiClient.CreateSshAccess(sandboxId, expiresInMinutes)
		if err != nil {
			fmt.Fprintf(os.Stderr, "Error creating SSH access: %s\n", err)
			os.Exit(1)
		}

		// Step 4: Handle --save flag if requested
		if saveConfig {
			err := saveSSHConfig(sandboxId)
			if err != nil {
				fmt.Fprintf(os.Stderr, "Error saving SSH config: %s\n", err)
				os.Exit(1)
			}
			fmt.Printf("SSH config saved for sandbox %s\n", sandboxId)
			// The actual host name is printed by saveSSHConfig function
			return
		}

		// Step 5: Either show token or connect to sandbox via SSH
		if showTokenOnly {
			fmt.Println("\nSSH Access Information:")
			fmt.Printf("Sandbox ID: %s\n", sshAccess.GetSandboxId())
			fmt.Printf("SSH Token: %s\n", sshAccess.GetToken())
			fmt.Printf("Expires At: %s\n", sshAccess.GetExpiresAt().Format(time.RFC3339))
			
			// Calculate time until expiration
			timeUntilExpiry := time.Until(sshAccess.GetExpiresAt())
			if timeUntilExpiry > 0 {
				fmt.Printf("Valid for: %s\n", timeUntilExpiry.Round(time.Second))
			}
			
			fmt.Println("\nTo connect via SSH manually:")
			fmt.Printf("ssh %s@ssh.app.daytona.io\n", sshAccess.GetToken())
		} else {
			if useProxy {
				// No stdout logs in proxy mode
				proxyConnection(sandboxId, sshAccess.GetToken())
			} else {
				fmt.Println("Connecting to sandbox via SSH...")
				connectToSandbox(sandboxId, sshAccess.GetToken())
			}
		}
	},
}

// proxyConnection establishes a proxy connection to the sandbox
func proxyConnection(sandboxId, sshToken string) {
	// Only errors go to stderr, other logs are skipped in proxy mode
	
	// Initialize SSH client config
	config := &ssh.ClientConfig{
		User:            sshToken, // Use the SSH token as the username
		HostKeyCallback: ssh.InsecureIgnoreHostKey(),
	}

	// Connect to the SSH server
	client, err := ssh.Dial("tcp", "ssh.app.daytona.io:22", config)
	if err != nil {
		fmt.Fprintf(os.Stderr, "Failed to connect to SSH server: %s\n", err)
		os.Exit(1)
	}
	defer client.Close()

	// Define the target hostname and port (you may need to adjust these)
	hostname := "localhost" // or the actual sandbox hostname
	sshPort := 22220

	// Create a local listener for port forwarding
	listener, err := net.Listen("tcp", "127.0.0.1:0")
	if err != nil {
		fmt.Fprintf(os.Stderr, "Failed to create local listener: %s\n", err)
		os.Exit(1)
	}
	defer listener.Close()

	localPort := listener.Addr().(*net.TCPAddr).Port

	// Set up port forwarding
	go func() {
		for {
			localConn, err := listener.Accept()
			if err != nil {
				return
			}

			go func() {
				defer localConn.Close()
				
				// Create a connection to the remote host through SSH
				remoteConn, err := client.Dial("tcp", fmt.Sprintf("%s:%d", hostname, sshPort))
				if err != nil {
					fmt.Fprintf(os.Stderr, "Failed to dial remote connection: %s\n", err)
					return
				}
				defer remoteConn.Close()

				// Copy data between local and remote connections
				go func() {
					io.Copy(remoteConn, localConn)
					remoteConn.Close()
				}()
				io.Copy(localConn, remoteConn)
			}()
		}
	}()

	// Connect to the local port and proxy stdin/stdout
	dialConn, err := net.Dial("tcp", fmt.Sprintf("127.0.0.1:%d", localPort))
	if err != nil {
		fmt.Fprintf(os.Stderr, "Failed to connect to local port: %s\n", err)
		os.Exit(1)
	}
	defer dialConn.Close()

	// Create error channel for goroutines
	errChan := make(chan error, 2)

	fmt.Printf("Connected to local port: %d\n", localPort)

	// Pipe stdout to connection
	go func() {
		_, err := io.Copy(os.Stdout, dialConn)
		if err != nil {
			errChan <- err
			return
		}
		errChan <- nil
	}()

	// Pipe stdin to connection
	go func() {
		_, err := io.Copy(dialConn, os.Stdin)
		if err != nil {
			errChan <- err
			return
		}
		errChan <- nil
	}()

	// Wait for either goroutine to complete or error
	if err := <-errChan; err != nil {
		fmt.Fprintf(os.Stderr, "Proxy connection error: %s\n", err)
		os.Exit(1)
	}
}

// connectToSandbox establishes an SSH connection to the sandbox
func connectToSandbox(sandboxId, sshToken string) {
	fmt.Printf("Connecting to SSH server: ssh.app.daytona.io:22\n")
	fmt.Printf("Using SSH token as username: %s\n", sshToken)
	
	// Initialize SSH client config
	config := &ssh.ClientConfig{
		User:            sshToken, // Use the SSH token as the username
		HostKeyCallback: ssh.InsecureIgnoreHostKey(),
	}

	// Connect to the SSH server
	client, err := ssh.Dial("tcp", "ssh.app.daytona.io:22", config)
	if err != nil {
		fmt.Fprintf(os.Stderr, "Failed to connect to SSH server: %s\n", err)
		os.Exit(1)
	}
	defer client.Close()
	
	fmt.Println("Successfully connected to SSH server!")

	// Create a new session
	session, err := client.NewSession()
	if err != nil {
		fmt.Fprintf(os.Stderr, "Failed to create SSH session: %s\n", err)
		os.Exit(1)
	}
	defer session.Close()

	// Set up terminal I/O
	session.Stdout = os.Stdout
	session.Stderr = os.Stderr
	session.Stdin = os.Stdin

	// Request a PTY
	err = session.RequestPty("xterm", 100, 100, ssh.TerminalModes{})
	if err != nil {
		fmt.Fprintf(os.Stderr, "Failed to request PTY: %s\n", err)
		os.Exit(1)
	}

	// Start the shell
	err = session.Shell()
	if err != nil {
		fmt.Fprintf(os.Stderr, "Failed to start shell: %s\n", err)
		os.Exit(1)
	}

	// Set up terminal for raw mode (only if we're in an interactive terminal)
	var oldState *term.State
	if term.IsTerminal(int(os.Stdin.Fd())) {
		oldState, err = term.MakeRaw(int(os.Stdin.Fd()))
		if err != nil {
			fmt.Fprintf(os.Stderr, "Warning: Could not set terminal to raw mode: %v\n", err)
			fmt.Fprintf(os.Stderr, "SSH connection may not work properly in non-interactive mode.\n")
		} else {
			defer func() {
				if oldState != nil {
					term.Restore(int(os.Stdin.Fd()), oldState)
				}
			}()
		}
	} else {
		fmt.Fprintf(os.Stderr, "Warning: Not running in an interactive terminal. SSH connection may not work properly.\n")
	}

	// Set up terminal size handling (only if we're in an interactive terminal)
	if term.IsTerminal(int(os.Stdin.Fd())) {
		go func() {
			termWidth, termHeight, err := term.GetSize(int(os.Stdin.Fd()))
			if err != nil {
				fmt.Fprintf(os.Stderr, "Warning: Could not get terminal size: %v\n", err)
				return
			}

			signalCh := make(chan os.Signal, 1)
			signal.Notify(signalCh, syscall.SIGWINCH)

			for sig := range signalCh {
				if sig == syscall.SIGWINCH {
					newTermWidth, newTermHeight, err := term.GetSize(int(os.Stdin.Fd()))
					if err != nil {
						fmt.Fprintf(os.Stderr, "Warning: Could not get terminal size: %v\n", err)
						continue
					}

					if termWidth != newTermWidth || termHeight != newTermHeight {
						termWidth = newTermWidth
						termHeight = newTermHeight

						// Send a window-change request to the remote side
						if err := session.WindowChange(termHeight, termWidth); err != nil {
							fmt.Fprintf(os.Stderr, "Warning: Could not send window change: %v\n", err)
						}
					}
				}
			}
		}()
	}

	// Wait for the session to complete
	err = session.Wait()
	if err != nil {
		fmt.Fprintf(os.Stderr, "SSH session ended with error: %s\n", err)
	}
	
	fmt.Println("\nConnection to sandbox closed.")
}

// getCurrentBinaryPath returns the path to the current executable
func getCurrentBinaryPath() (string, error) {
	execPath, err := os.Executable()
	if err != nil {
		return "", err
	}
	
	// Resolve symlinks to get the actual path
	resolvedPath, err := filepath.EvalSymlinks(execPath)
	if err != nil {
		return execPath, nil // Return original path if symlink resolution fails
	}
	
	return resolvedPath, nil
}

// saveSSHConfig saves an SSH config entry to ~/.ssh/config
func saveSSHConfig(sandboxId string) error {
	// Get current binary path
	binaryPath, err := getCurrentBinaryPath()
	if err != nil {
		return fmt.Errorf("failed to get binary path: %w", err)
	}
	
	// Get current working directory name
	wd, err := os.Getwd()
	if err != nil {
		return fmt.Errorf("failed to get current directory: %w", err)
	}
	baseName := filepath.Base(wd)
	
	// Get home directory
	homeDir, err := os.UserHomeDir()
	if err != nil {
		return fmt.Errorf("failed to get home directory: %w", err)
	}
	
	// Create ~/.ssh directory if it doesn't exist
	sshDir := filepath.Join(homeDir, ".ssh")
	if err := os.MkdirAll(sshDir, 0700); err != nil {
		return fmt.Errorf("failed to create .ssh directory: %w", err)
	}
	
	// Path to SSH config file
	configPath := filepath.Join(sshDir, "config")
	
	// Read existing config
	configContent, err := os.ReadFile(configPath)
	if err != nil && !os.IsNotExist(err) {
		return fmt.Errorf("failed to read SSH config: %w", err)
	}
	
	configStr := string(configContent)
	
	// Find an available host name
	hostName := findAvailableHostName(configStr, baseName)
	
	// Create the SSH config entry
	entry := fmt.Sprintf(`
Host %s
    ProxyCommand %s ssh %s --proxy
    StrictHostKeyChecking no
`, hostName, binaryPath, sandboxId)
	
	// Append to config file
	file, err := os.OpenFile(configPath, os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0644)
	if err != nil {
		return fmt.Errorf("failed to open SSH config file: %w", err)
	}
	defer file.Close()
	
	_, err = file.WriteString(entry)
	if err != nil {
		return fmt.Errorf("failed to write SSH config: %w", err)
	}
	
	fmt.Printf("SSH config saved with host name: %s\n", hostName)
	return nil
}

// findAvailableHostName finds an available host name, adding number suffix if needed
func findAvailableHostName(config, baseName string) string {
	// First try the base name
	if !containsSSHEntry(config, baseName) {
		return baseName
	}
	
	// Try with number suffixes
	for i := 1; i <= 999; i++ {
		candidateName := fmt.Sprintf("%s%d", baseName, i)
		if !containsSSHEntry(config, candidateName) {
			return candidateName
		}
	}
	
	// Fallback if we somehow can't find a name (shouldn't happen)
	return fmt.Sprintf("%s%d", baseName, 1)
}

// containsSSHEntry checks if an SSH config entry with the given hostname exists
func containsSSHEntry(config, hostname string) bool {
	lines := strings.Split(config, "\n")
	
	for _, line := range lines {
		line = strings.TrimSpace(line)
		
		if strings.HasPrefix(line, "Host ") {
			// Check if this is our host
			host := strings.TrimSpace(line[5:])
			if host == hostname {
				return true
			}
		}
	}
	
	return false
}

func init() {
	// Add flags
	sshCmd.Flags().Float32P("expires", "e", 60, "SSH access expiration time in minutes (0 for no expiration)")
	sshCmd.Flags().Bool("token-only", false, "Show SSH token information without connecting")
	sshCmd.Flags().Bool("proxy", false, "Proxy input/output instead of creating an interactive terminal")
	sshCmd.Flags().Bool("save", false, "Save SSH config entry to ~/.ssh/config")
}
